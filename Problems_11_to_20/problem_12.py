# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import time
import numpy
from math import sqrt

start = time.time()

def triangle_number(x):
    return int(x*(x+1)/2)
    
def primes(x):

    prime = [True for i in range(x+1)]
    p = 2
    prime[0] = False
    prime[1] = False
    while p <= x:
        if prime[p] == True:
            for i in range(p*2,x+1,p):
                prime[i] = False
        p += 1
    primes = []
    for i in range(x):
        if prime[i] == True:
            primes.append(i)
    return primes    

p = primes(20)

def count_divisors(x):
    a = []
    b = x
    while b != 1:
        for i in p:
            if b % i == 0:
                a.append(i)
                b = b/i
                break
        else:
            return 0
            break
    a.sort()
    distinct_primes = set(a)
    exponents = []
    for ele in distinct_primes:
        exponents.append(a.count(ele)+1)
    return int(numpy.prod(exponents))

count = 2
count_div = 1
while count_div < 500:
    count += 1
    count_div = count_divisors(triangle_number(count))

print(triangle_number(count))

print(time.time() - start)
